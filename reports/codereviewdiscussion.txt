SWEN 222
Team SnicketySnacks (James Watt, Thomas Edwards, Liam Byrne, Mohsen Javaher, Andrew McManaway)

CODE REVIEW DISCUSSION

Our code review was a successful endeavour. The game team is divided in front and back end developers, and so to
embrace this setup, the code reviewers were other developers working in the same end of the project.

The front end was modified greatly, with changes to how the view draws some of the elements on the screen being the
most prevalent modification. The controller was completely revamped to allow easy key binding and the use of a common
interface across the majority of the individual components.

In the backend...

Map: 
The Map package was reviewed by Tom, he thought it was done in a pretty neat way with different "layers" representing different 
parts of the map. The maps were also designed in a pretty awesome map editor which meant that they were all the same 
theme and they all look great! Some of the methods haven't been fully tested but that's great as it gives us something to do.
Some improvements to possibly implement might be to split the Map class up into a few subclasses so that we don't have a giant class.
Also putting all the item parsing methods into a single class so that we can more easily add new items is something we plan to do in 
future.

SaveLoad:
The saving and loading features haven't been implemented yet, however the planned method of using serialisation makes this quite an easy 
task as we simply have to turn the Game (and potentially all its subclasses, not sure yet) into a byte stream and then save the byte stream 
to a file.

Player Package:
Reviewer: James. Watt
The class itself is set out and written in excellent fashion. No method is overly large and all thrown exceptions are appropriate for the situation.
There are a good amount of player tests for the current point in development which are spread across the player and map packages, there will need to be more
in future as more features are added. The only thing that i see that needs touch ups is some of the method comments which seem a little bit out dated or do
not contain enough information. However as integration and testing is still occurring this is not a bad thing as methods and method parameters are still likely to change. 

Item Package:
Reviewer: James. Watt
This package has many small classes that make up the items in the game and the players backpack. Each item has its own class and extends a abstractItem, each item can
then implement an extra functionality class depending on the item, these being equippable and Usable. I found this class layout to be very logical, and a good
simple solution to approaching the issue of items. The backpack class is essentially an arrayList with restrictions which again is logical and simple. I think there was a lot
of potential to over complicate this class, and i'm pleased to say that the primary author thomas did not over complicate the dynamics of items what so ever. I think that
the use of inheritance is excellent and that there are a sufficient amount of tests for the given classes. I would not change anything in this class except maybe some of
the comments on methods or even better create a read me to explain how the classes interact.

AI enemies:
Reviewer: Mohsen. javaher
This package is set out and written in excellent fashion. This package has many small classes that make up the enemy in the game. Each enemy has it's own class and extends a ControlScheme Interface in this interface there is a
doBestAction(NPC,Player) which takes a non player character and a player and it does the operations on them. There are Three type of Schemes(Easy,Medium,Hard) in this package which helps to have
a back up idea. The EasySchema is not AI at all the class has been implemented by the random() function which returns a random direction and it will move the NPC to that direction 
and if there is a wall then the function has to generate a new random number, so in the easyEscheme shoot at the player every 200 moves and then change direction
also in the mediumEscheme shoot at the player every 100 moves and then change direction. 
HardScheme the class has been implemented in an AI way fantastic code skills in this class. To implement the AI part of the project the enemy is getting the current status of the Player and then it 
sends the the bullets to that status however the game is running and the Player can make a move so if the player is too slow it will be decreasing the health of the Player.
Also in the enemy class there is a shoot method which has been implemented by the TimerTask which needs a schedual which is kind of thecertain amount of seconds that it takes to be reloaded for the shoots.

